{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  "Vue Template": {
    "prefix": "vtemp",
    "body": ["<template>", "${0}", "</template>"],
    "description": "blank template"
  },
  "Vue Script Setup": {
    "prefix": "vscript",
    "body": ["<script setup lang='ts'>", "${0}", "</script>"],
    "description": "blank script setup"
  },
  "Vue Style Scoped": {
    "prefix": "vstyle",
    "body": ["<style scoped>", "${0}", "</style>"],
    "description": "blank style scoped"
  },
  "Vue Icon": {
    "prefix": "vicon",
    "body": ["<span i-${0} class='h-5 w-5'/>"],
    "description": "css icon from icones"
  },
  "Vue Composable": {
    "prefix": "vcomposable",
    "body": [
      "export function use${1:Composable}() {",
      "\tconst ${2:myRef} = ref()",
      "",
      "\tfunction ${3:myFunc}() {",
      "\t\tconsole.log(${2:myRef})",
      "\t}",
      "",
      "\treturn {",
      "\t\t${2:myRef},",
      "\t\t${3:myFunc},",
      "\t}",
      "}",
      ""
    ],
    "description": "composable template"
  },
  "Vue Emits": {
    "prefix": "vemits",
    "body": [
      "const emit = defineEmits<{",
      "\t(e: '${1:eventName}', ${2:myVar}: ${3:myType}): void",
      "}>()"
    ],
    "description": "emits template"
  },
  "Vue Computed": {
    "prefix": "vcomputed",
    "body": ["const ${1:name} = computed(() => {", "\treturn ${0}", "})"],
    "description": "computed property"
  },
  "Vue Computed Short": {
    "prefix": "vshortcomputed",
    "body": ["const ${1:name} = computed(() => ${0})"],
    "description": "computed property"
  },
  "Vue Watch": {
    "prefix": "vwatchdeep",
    "body": ["watch(${1:name}, (newVal) => {${0}}, { deep: true })"],
    "description": "deep watcher"
  },
  "Vue WatchEffect": {
    "prefix": "vwatcheffect",
    "body": ["watchEffect(() => {", "\tconsole.log(${2:func})", "})"],
    "description": "watchEffect"
  },
  "Vue onMounted": {
    "prefix": "vonmount",
    "body": ["onMounted(() => {", "\t${0}", "})"],
    "description": "onMounted lifecycle hook"
  },
  "Vue Props": {
    "prefix": "vprops",
    "body": ["const { ${1} } = defineProps<{ ${1}: ${2} }>()"],
    "description": "props"
  },
  "Vue ref": {
    "prefix": "vref",
    "body": ["const ${1:name} = ref(${0})"],
    "description": "ref value"
  },
  "Vue reactive": {
    "prefix": "vreactive",
    "body": ["const ${1:name} = reactive(${0})"],
    "description": "reactive value"
  },
  "TS ternary": {
    "prefix": "tsternary",
    "body": ["testMe ? truthy : falsy;"],
    "description": "ternary operator for js/ts"
  }
}
